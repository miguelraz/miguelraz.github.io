<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0"
      xmlns:content="http://purl.org/rss/1.0/modules/content/"
      xmlns:dc="http://purl.org/dc/elements/1.1/"
      xmlns:media="http://search.yahoo.com/mrss/"
      xmlns:atom="http://www.w3.org/2005/Atom"
      xmlns:georss="http://www.georss.org/georss">

      <channel>
        <title><![CDATA[PathToPerformance]]></title>
        <link>https://miguelraz.github.io</link>
        <description><![CDATA[A virtual diary for progress on all fronts by Miguel Raz GuzmÃ¡n Macedo]]></description>
        <generator>Franklin.jl -- https://github.com/tlienart/Franklin.jl</generator>
        <atom:link
            href="https://miguelraz.github.io/feed.xml"
            rel="self"
            type="application/rss+xml" />


<item>
    <title><![CDATA[GSoC in LLVM 2024]]></title>
    <link>https://miguelraz.github.io/blog/gsoc2024/index.html</link>
    <guid>9</guid>
    <description><![CDATA[GSoC in LLVM 2024]]></description>    
    
    <content:encoded><![CDATA[<h1 id="im_trying_to_get_a_gsoc_2024_in_llvm">I&#39;m trying to get a GSoC 2024 in LLVM</h1>
<p>and I will be documenting my work with this ongoing blogpost in reverse chronological order.</p>
<hr />
<p>If you want to see more posts like this, consider chucking a buck or two on my <a href="https://github.com/miguelraz">GitHub sponsors</a>, or, you know, hire me as a grad student.</p>
<hr />
<h2 id="23022024">23/02/2024</h2>
<p>Only added stubs for where <code>ISD::&#91;US&#93;CMP</code> will go in the <code>LegalizerDAG.cpp</code>. Some code is better than no code&#33;</p>
<h2 id="22022024">22/02/2024 </h2>
<p>Back from exams. I let my mentors know I wouldn&#39;t be around for a few and would come back later.</p>
<p>Omg Nori taught me how to use vim marks &#40;even within VSCode&#41;. <code>ma</code> will set a mark <code>a</code> and <code>&#39;a</code> lets you jump back to it. If you set an uppercase one, it&#39;s GLOBAL and you can jump between files&#33;</p>
<h2 id="19022024">19/02/2024</h2>
<p>Got feedback for the proposal. Seems people like not reading ChatGPT scripts, whodathunkit. Aggregated suggestions and sent it off. Should update if I get more updates.</p>
<p>Also, rebased the next step of the PR, which is merging into the <a href="https://github.com/llvm/llvm-project/pull/85822">SelectionDAG</a></p>
<p>Alright, pushed some code that probably fails on everything but can&#39;t get more brainpower on learning the casting RTTI APIs today.</p>
<h2 id="18022024">18/02/2024 </h2>
<p>IT GOT MERGED&#33;</p>
<p>I wrote up the draft proposal, and sent it for feedback from the mentors.</p>
<p>Tomorrow I&#39;ll try to get started on the next steps of the proposal and send a dummy PR to get to the good stuff.</p>
<h2 id="17022024">17/02/2024 </h2>
<p>Actually just rested yesterday. &#39;Twas good. Today I&#39;ll do some  light reading.</p>
<ul>
<li><p><code>isa&lt;&gt;, cast&lt;&gt;, dyn_cast&lt;&gt;</code> templates</p>
<ul>
<li><p><code>isa&lt;&gt;</code> returns <code>true/false</code> if it&#39;s an instance of the specified class </p>
</li>
<li><p><code>cast&lt;&gt;</code> is a &quot;checked cast&quot;</p>
</li>
<li><p><code>dyn_cast&lt;&gt;</code> usually used in <code>if &#40;auto *AI &#61; dyn_cast&lt;AllocationInst&gt;&#40;Val&#41;&#41; &#123;</code></p>
</li>
</ul>
</li>
<li><p><code>STringRef</code> and <code>Twine</code> - <code>Value</code> class and <code>StringMap</code> must be generic over null chars, can&#39;t take a <code>const char*</code></p>
</li>
<li><p>Error handling: abort early, use <code>assert&#40;cond &amp;&amp; &quot;you done goofed&quot;&#41;;</code></p>
</li>
</ul>
<pre><code class="language-julia">enum &#123; Foo, Bar, Baz &#125; X &#61; foo&#40;&#41;;switch &#40;X&#41; &#123;
  case Foo: /* Handle Foo */; break;
  case Bar: /* Handle Bar */; break;
  default:
    llvm_unreachable&#40;&quot;X should be Foo or Bar here&quot;&#41;;
&#125;</code></pre>
<ul>
<li><p>use LLVM_DEBUG and <a href="https://llvm.org/docs/ProgrammersManual.html#fine-grained-debug-info-with-debug-type-and-the-debug-only-option">friends</a></p>
</li>
</ul>
<pre><code class="language-julia">LLVM_DEBUG&#40;dbgs&#40;&#41; &lt;&lt; &quot;I am here&#33;\n&quot;&#41;;</code></pre>
<p>and then </p>
<pre><code class="language-julia">&#36; opt &lt; a.bc &gt; /dev/null -mypass
&lt;no output&gt;
&#36; opt &lt; a.bc &gt; /dev/null -mypass -debug
I am here&#33;</code></pre>
<ul>
<li><p>Use the <a href="https://llvm.org/docs/ProgrammersManual.html#the-statistic-class-stats-option">Statistic</a> class&#33;</p>
</li>
<li><p>stopped at picking the right data structure.</p>
</li>
</ul>
<h2 id="16022024">16/02/2024 </h2>
<p>Start: read LLVM Programmer&#39;s Manual, then start with some local changes to the SelectionDAG.</p>
<h2 id="15022024">15/02/2024</h2>
<p>Derp, I kept getting &quot;undefined intrinsics&quot; errors when running FileCheck like </p>
<pre><code class="language-julia">&gt; ../../../build/bin/opt -S -passes&#61;verify 2&gt;&amp;1 intrinsic-cmp.ll | FileCheck intrinsic-cmp.ll</code></pre>
<p>... because I had to rebuild LLVM and have the new <code>opt</code> pick it up. Once that happened, even the new <code>llvm-lit</code> passed :D</p>
<p>I also had to remove the <code>CHECK-LABEL</code>, still not sure why. Lemme read that for a bit.</p>
<p>Also, I should update <code>mold</code> - it failed with an unknown <code>--long-plt</code> option.</p>
<p>Here&#39;s my LLVM build instruction: </p>
<pre><code class="language-julia">&gt; cmake -S . -B build -G Ninja -DLLVM_TARGETS_TO_BUILD&#61;X86 -DBUILD_SHARED_LIBS&#61;ON -DCMAKE_BUILD_TYPE&#61;Debug -DLLVM_OPTIMIZED_TABLEGEN&#61;ON -DLLVM_USE_NEWPM&#61;ON -DLLVM_USE_SPLIT_DWARF&#61;ON -DLLVM_PARALLEL_LINKER_JOBS&#61;10 -DLLVM_PARALLEL_COMPILE_JOBS&#61;10
&gt; mold -run ninja -C .</code></pre>
<p>Windows builders take freakin&#39; forever to run.</p>
<ul>
<li><p>Coding Standards </p>
<ul>
<li><p>prefer <code>llvm::DenseMap</code> over <code>std::unordered_map</code> and similar. No std IO plz.</p>
</li>
<li><p>comments - write what does is trying to do and why, not <em>how</em></p>
</li>
<li><p>spaces not tabs</p>
</li>
<li><p>prefer C&#43;&#43; style casts like <code>auto DestVecLen &#61; cast&lt;VectorType&gt;&#40;DestTy&#41;-&gt;getElementCount&#40;&#41;;</code> for getting the Vector length</p>
</li>
<li><p>beware <code>auto</code> copies:</p>
</li>
</ul>
</li>
</ul>
<pre><code class="language-julia">// Typically there&#39;s no reason to copy.
for &#40;const auto &amp;Val : Container&#41; observe&#40;Val&#41;;
for &#40;auto &amp;Val : Container&#41; Val.change&#40;&#41;;// Remove the reference if you really want a new copy.
for &#40;auto Val : Container&#41; &#123; Val.change&#40;&#41;; saveSomewhere&#40;Val&#41;; &#125;// Copy pointers, but make it clear that they&#39;re pointers.
for &#40;const auto *Ptr : Container&#41; observe&#40;*Ptr&#41;;
for &#40;auto *Ptr : Container&#41; Ptr-&gt;change&#40;&#41;;</code></pre>
<p>* use early returns, specially in loops:</p>
<pre><code class="language-julia">// not this 
for &#40;Instruction &amp;I : BB&#41; &#123;
  if &#40;auto *BO &#61; dyn_cast&lt;BinaryOperator&gt;&#40;&amp;I&#41;&#41; &#123;
    Value *LHS &#61; BO-&gt;getOperand&#40;0&#41;;
    Value *RHS &#61; BO-&gt;getOperand&#40;1&#41;;
    if &#40;LHS &#33;&#61; RHS&#41; &#123;
      ...
    &#125;
  &#125;
&#125;
// prefer this 
for &#40;Instruction &amp;I : BB&#41; &#123;
  auto *BO &#61; dyn_cast&lt;BinaryOperator&gt;&#40;&amp;I&#41;;
  if &#40;&#33;BO&#41; continue;  Value *LHS &#61; BO-&gt;getOperand&#40;0&#41;;
  Value *RHS &#61; BO-&gt;getOperand&#40;1&#41;;
  if &#40;LHS &#61;&#61; RHS&#41; continue;  ...
&#125;</code></pre>
<p>* other good tips for no *else* after a *return* 
* turn predicate loops into functions 
* assert liberally&#33; you may find other people&#39;s bugs&#33; <code>assert&#40;Ty-&gt;isPointerType&#40;&#41; &amp;&amp; &quot;Can&#39;t allocate a non-pointer type&#33;&quot;&#41;;</code>
* consider <code>llvm::unreachable&#40;&quot;invalid radix for integer literal&quot;&#41;</code>
* never <code>using namespace std</code>
* don&#39;t evaluate <code>end&#40;&#41;</code> every time through a loop&#33;</p>
<pre><code class="language-julia">// not this
BasicBlock *BB &#61; ...
for &#40;auto I &#61; BB-&gt;begin&#40;&#41;; I &#33;&#61; BB-&gt;end&#40;&#41;; &#43;&#43;I&#41;
  ... use I ...// prefer this 
BasicBlock *BB &#61; ...
for &#40;auto I &#61; BB-&gt;begin&#40;&#41;, E &#61; BB-&gt;end&#40;&#41;; I &#33;&#61; E; &#43;&#43;I&#41;
  ... use I ...</code></pre>
<p>* lol <code>#include &lt;iostream&gt;</code> is forbidden, as well as <code>std::endl</code>
* prefer preincrement &#40;&#43;&#43;x&#41;
* anonymous namespaces allow more aggressive optimizations&#33; make them small and only use them for class declarations
* omit braces on short if&#39;s -_-
* read &quot;Effective C&#43;&#43;&quot; by Scott Meyers or &quot;Large Scale C&#43;&#43; Software Design&quot; by John Lakos. later.</p>
<p>BIG ALERT&#33; We&#39;re passing all tests and Nikita says &quot;LGTM&#33;&quot; Huzzahhh&#33;</p>
<p>I finished reading the Coding Standards and will now read the LLVM Programmer&#39;s Manual.</p>
<p>Afternoon: only 1 reviewer missing approval&#33;</p>
<h2 id="14022024">14/02/2024 </h2>
<p>It&#39;s close to finishingggggggggg</p>
<p>Nikita mentioned the <a href="https://llvm.org/docs/CodingStandards.html#name-types-functions-variables-and-enumerators-properly">CodingStandars</a>, I&#39;ll give that a read in a bit.</p>
<p>In <code>FileCheck</code> unit tests, it&#39;s just 2 spaces, not tabs or 4 spaces.</p>
<p>Dhruv recommends using <code>git clang-format</code> or <code>Format Modified Lines</code> in VSCode.</p>
<p>I only have to make <code>FileCheck</code> pass now and Nikita says it should be good&#33;</p>
<h2 id="13022024">13/02/2024 </h2>
<p>OK, I just saw that both Nikita Popov and Dhruv Chawla are listed as mentors for the project. Should try and reach out before the application period begins.</p>
<p>Nikita commented that there&#39;s two good places to look into &#40;which I should do meanwhile&#41;:</p>
<ul>
<li><p>The <a href="https://llvm.org/docs/CodeGenerator.html#instruction-selection-section">Selection DAG part of the manual</a></p>
</li>
<li><p>The good first issues on the github tracker, which probably are good to look into.</p>
</li>
</ul>
<h3 id="notes_on_the_selectiondag">Notes on the SelectionDAG </h3>
<ul>
<li><p>GlobalISel and SelectionDAG both translated LLVM code to target specific machine instructions.</p>
</li>
<li><p>In theory Intrinsics.td should handle it all but some parts need custo C&#43;&#43; code.</p>
</li>
<li><p>SDAGs represent Machine Value Types and DataFlow types. Dataflow types provide ordering.</p>
</li>
<li><p>Legal vs illegal DAG: only use supported ops on supported types </p>
</li>
<li><p>SDAG phases: build, optimize, legalizeTypes, optimize, legalize, select instructions, scheduling       * common to use <code>-debug-only&#61;isel/-dump</code> and <code>-filter-print-funcs&#61;&lt;function-name&gt;</code></p>
<ul>
<li><p>several flags can print SDAG after each pass </p>
</li>
</ul>
</li>
<li><p>OK, effective sign extension elimination seems to be highly non-trivial optimizations</p>
</li>
<li><p>Oohhhh TableGen representing stuff as a DAG lets you build the SelectionDAG on top of it&#33;</p>
</li>
</ul>
<p>After a few hours of noodling with PR reviews, it&#39;s clear I gotta jump on a next one/help PR review some other people. Maybe it&#39;s not great to go full mercenary on every <code>good-first-issue</code> and try and help others along the way.</p>
<p><code>ParticleSwarmOptimization</code> was kind enough in the <code>LLVM/beginners</code> Discord chat to point out that I should have a full build of LLVM and then run <code>llvm-lit</code> from there on a unit test. Sure enough, that let me do <code>gh pr checkout 84903</code> and then <code>LIT llvm/test/CodeGen/AArch64/hadd-combine.ll</code> to check that a unit test properly ran. Now I can help verify my own and other people&#39;s PRs&#33; yay&#33;</p>
<p>That seems like enough for today, I&#39;ll hunt for some good issues tomorrow.</p>
<h2 id="12022024">12/02/2024 </h2>
<p>Did a bunch of very quick fixes and got some neat feedback.</p>
<h2 id="11022024">11/02/2024 </h2>
<p>Ohhhhhh neat&#33; Got some really fast feedback this time around on stray newlines and a couple fixes on the PR.  Things are moving faster and faster&#33; I <em>think</em> I&#39;m only missing adding some <code>FileCheck</code> tests for the  invariants under the <code>Verifier.cpp</code> stuff that isn&#39;t handled by <code>Intrinsics.td</code> but that sounds about it&#33;</p>
<p><a href="https://llvm.org/docs/CommandGuide/FileCheck.html">FileCheck</a> reading I&#39;ll do for a bit.</p>
<p>Note: If you are going to check multiple things in a single file, use a <code>CHECK-LABEL</code> to avoid spurious matches.</p>
<p>Sometimes, a <code>CHECK-NEXT</code> is useful as the last unit test. </p>
<p>Learned the LLVMIR verbose call syntax goes &#40;gotta include types in call site&#41;.</p>
<p>That should do it for today, see y&#39;all tomorrow.</p>
<h2 id="10022024">10/02/2024 </h2>
<p>Plan for today: Read the IR Verifier, add code to it if needed, then work on adding to SDAG node.</p>
<p>IR Verifier code: It&#39;s under <code>llvm/IR/Verifier.h</code> and <code>llvm/IR/Verifier.cpp</code>.</p>
<p>Ok, read the code for a bit. What I&#39;m interested in in <code>Verifier.cpp</code> is the huge switch statement towards the end of the file where the verification of intrinsics happens.</p>
<p>Oh neat, learned a lot of places that probably need modification via searching <code>case Intrinsic::</code> in the llvm folder.</p>
<p>Neat&#33; <code>VectorUtils.cpp</code> looks like where we add SIMD :D</p>
<p>There is also a <code>SelectionDAGBuilder.cpp</code> that seems like I should update stuff there.</p>
<p>Ah, seems the SDAG needs the ID node to be added to the ISDOpcodes first, like <code>ISD::SCMP</code> and such.</p>
<p><a href="https://llvm.org/docs/LangRef.html#intrinsic-functions">Intrinsic Function</a>: start with <code>llvm.</code> prefix. Must always be external functions. If any are added, must be documented in LangRef. Have naming convention on type name return.</p>
<p>In <code>TargetLowering.h</code>:</p>
<pre><code class="language-julia">/// This class defines information used to lower LLVM code to legal SelectionDAG
/// operators that the target instruction selector can accept natively.
///
/// This class also defines callbacks that targets must implement to lower
/// target-specific constructs to SelectionDAG operators.
class TargetLowering : public TargetLoweringBase &#123;</code></pre>
<p>Updated the PR to not include a dirty file from the <code>ValueTracking.cpp</code> unit tests.</p>
<p>Sweet, rebased the <code>spaceship-intrinsic</code> branch changes into a new one.</p>
<p>Now I can go for </p>
<pre><code class="language-julia">lib/CodeGen/SelectionDAG/SelectionDAG.cpp:Add code to print the node to getOperationName. If your new node can be
evaluated at compile time when given constant arguments &#40;such as an add of a constant with another constant&#41;, find the getNode method that takes the appropriate number of arguments, and add a case for your node to the switch statement that performs constant folding for nodes that take the same number of arguments as your new node.</code></pre>
<p>Which gives on Line 6629 of <code>SelectionDAG.cpp</code></p>
<pre><code class="language-julia">SDValue SelectionDAG::getNode&#40;unsigned Opcode, const SDLoc &amp;DL, EVT VT,
                              SDValue N1, SDValue N2, const SDNodeFlags Flags&#41; &#123;</code></pre>
<p>where I can add an <code>case ISD::UCMP</code>/<code>case ISD::SCMP</code>. </p>
<p>Oh wow, having VSCode let me just hover over a type and give me info is amazing.</p>
<p>Alright, did some good work today I think.</p>
<hr />
<p>Got some feedback on typo fixes from other people and some concrete directions from Nikita:</p>
<pre><code class="language-julia">def int_scmp : DefaultAttrsIntrinsic&lt;
    &#91;llvm_anyint_ty&#93;, &#91;llvm_anyint_ty, LLVMMatchType&lt;1&gt;&#93;,
    &#91;IntrNoMem, IntrSpeculatable, IntrWillReturn&#93;&gt;;</code></pre>
<p>for the <code>Intrinsics.td</code> so that we can have a &quot;result type overload over a fixed type&quot; and then </p>
<blockquote>
<p>and then add a check in Verifier.cpp that a&#41; the return type and the first argument type have the same number of elements &#40;if they are vectors&#41; and b&#41; the return scalar type has width at least 2.</p>
</blockquote>
<p>So I&#39;ve pushed a commit already to have the <code>Intrinsics.td</code> that way and I will now add a case to the <code>Verifier.cpp</code> in the <code>void Verifier::visitIntrinsicCall&#40;Intrinsic::ID ID, CallBase &amp;Call&#41; &#123;</code> to add </p>
<p>&#40;Many hours later&#41; Put in a good first effort into the <code>Verifier.cpp</code> cases for <code>Intrinsic::scmp/ucmp</code>. It&#39;s probably a bit boneheaded but I&#39;ve been getting really good and fast feedback on the PRs, so I feel encouraged to keep the hot streak going.</p>
<h2 id="09022024">09/02/2024</h2>
<p>Lost the renaming battle to standard practices. Can&#39;t complain. Updated the PR to reflect that.</p>
<p>Now, reading the <a href="https://github.com/llvm/llvm-project/blob/release/17.x/llvm/lib/Transforms/Scalar/DCE.cpp">DCE</a> pass code.</p>
<p>Ok, Andrzej WarzyÅski did <a href="https://www.youtube.com/watch?v&#61;ar7cJl2aBuU">an incredibly useful tutorial</a> for <code>llvm-tutor</code>.</p>
<p>I&#39;ll try writing the Transformation pass, since it&#39;s closes to what I need.</p>
<p>Notes:     * <code>LLVM_DEBUG</code> is super useful. </p>
<pre><code class="language-julia">#include &quot;llvm/ADT/Statistic.h&quot;
#include &quot;llvm/Support/Debug.h&quot;#define DEBUG_TYPE &quot;mba-add&quot;
STATISIC&#40;SubstCount, &quot;The # of substituted instructions&quot;</code></pre>
<p>and then you can do:</p>
<pre><code class="language-julia">LLVM_DEBUG&#40;dbgs&#40;&#41; &lt;&lt; *BinOp &lt;&lt; &quot; -&gt; &quot; &lt;&lt; *NewInst &lt;&lt; &quot;\n&quot;;
    // or , with Statistic and &#96;-stat&#96; on the &#96;opt&#96; CLI and debug build
    &#43;&#43;SubstCount;</code></pre>
<ul>
<li><p>Analysis inherits from <code>AnalysisInfoMixin</code></p>
</li>
<li><p>Very common pattern:</p>
</li>
</ul>
<pre><code class="language-julia">for &#40;auto &amp;Func : M&#41; &#123;
    for &#40;auto &amp;BB : Func&#41; &#123;
        for &#40;auto &amp;Ins : BB&#41; &#123;
            ...</code></pre>
<ul>
<li><p>You call <code>PreservedAnalysis.abandon&#40;&#41;</code> when you wanna bail on a logic.</p>
</li>
<li><p><code>FileCheck</code> is a pattern matching tool that comes with LLVM. Can check emitted assembly output for test correctness.</p>
</li>
<li><p>Rely on CMake&#39;s <code>find_package</code> and add sanity-checks to your scripts&#33;</p>
</li>
<li><p>LLDB is your friend </p>
</li>
</ul>
<pre><code class="language-julia">lldb -- &#36;LLVM_DIR/bin/opt -load-pass-plugin lib/libMyPass.so -passes&#61;my-pass -S dummy.ll
&#40;lldb&#41; b MyPass::run 
&#40;lldb&#41; r</code></pre>
<p>Finally: started a branch called <code>scmp-and-ucmp</code> and I&#39;ll start trying out changes there whilst people make up their minds.</p>
<h2 id="8022024">8/02/2024 </h2>
<p>Jyn strikes again and sometimes you can just do <code>make</code> after <code>cmake</code> because some stuff is optional.</p>
<p>Otherwise, install:</p>
<pre><code class="language-julia">sudo apt install libzstd-dev libcurl4-openssl-dev libedit-dev</code></pre>
<p>to get rolling.</p>
<p>Once you do </p>
<pre><code class="language-julia"># Run the pass
&#36;LLVM_DIR/bin/opt -load-pass-plugin ./libHelloWorld.&#123;so|dylib&#125; -passes&#61;hello-world -disable-output input_for_hello.ll
# Expected output
&#40;llvm-tutor&#41; Hello from: foo
&#40;llvm-tutor&#41;   number of arguments: 1
&#40;llvm-tutor&#41; Hello from: bar
&#40;llvm-tutor&#41;   number of arguments: 2
&#40;llvm-tutor&#41; Hello from: fez
&#40;llvm-tutor&#41;   number of arguments: 3
&#40;llvm-tutor&#41; Hello from: main
&#40;llvm-tutor&#41;   number of arguments: 2</code></pre>
<p>using <code>-disable-output</code> means no bitcode gets produced.</p>
<p>Passes come in 3 flavors, mostly: Analysis, Transformations and CFG manipulations.</p>
<p>Note that <code>clang</code> adds the <code>optnone</code> function attribute if 1&#41; no opt level is specified or <code>-O0</code> is specified. </p>
<p>Ah, forgot to run the <code>cmake .. -&gt; mold -run make -j</code> and had some passes missing. Derp.</p>
<p>Minutes lost to cmake bullshit: 60.</p>
<p>Oh sweet&#33; I just learned that I can write an injection pass that will give me a new binary and it will print out cool analysis info.</p>
<p>Also, if I get an instrumented binary I can just use <code>lli</code> to interpret the <code>.ll</code> file directly.</p>
<p>You can also build a static binary that will run that analysis for you&#33; </p>
<p>Ran a bunch of passes with <code>opt</code> and friends. Transformation passes will normally inherit from <code>PassInfoMixin</code>.</p>
<p>Analysis Passes will inherit from <code>AnalysisInfoMixin</code>.</p>
<p>Ok, cool I an outdated example in llvm-tutor <a href="https://github.com/banach-space/llvm-tutor/pull/111">in the examples</a> and sent a PR for it.</p>
<p>Tomorrow I shall dive into those optimization passes at the end and hopefully run some good <code>lit</code> tests.</p>
<h2 id="7022024">7/02/2024 </h2>
<p>Alright, did some good catchup on the semester and pushed the <a href="https://discourse.llvm.org/t/rfc-add-3-way-comparison-intrinsics/76685/7?u&#61;miguelraz">PR forward a bit</a>.</p>
<p>I also had an awesome &quot;uniwtting tourist&quot; genius moment by pointing out the return type could be different than what Nikita had thought of.</p>
<p>Today I setup my environment with</p>
<pre><code class="language-julia">wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
sudo apt-add-repository &quot;deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main&quot;
sudo apt-get update
sudo apt-get install -y llvm-17 llvm-17-dev llvm-17-tools clang-17</code></pre>
<p>so now I can run <code>opt</code> shenanigans without awkward path invocations.</p>
<h2 id="2022024">2/02/2024 </h2>
<p>I&#39;m waiting for others to chime in on my latest fix so I will be reading on how to add <a href="https://llvm.org/docs/TestingGuide.html">unit tests</a>.</p>
<p>Cool, that took like 25 minutes and I pushed a commit into the unit test generation framework.</p>
<p>Took me a bit but tried adding using <code>llvm-lit</code> and couldn&#39;t get the <code>Examples</code> folder to run, so I posted a question in the #beginners channel about it.</p>
<h2 id="1022024">1/02/2024 </h2>
<p>Sweet&#33; I was able to address Nikita&#39;s refactoring comments without too much hassle.</p>
<p>I guess the next task is to add it to the Verifier.</p>
<p>-&gt; I read the <code>llvm/lib/IR/Verifier.cpp</code> header and grep&#39;d for <code>smin</code>. Seems I can add a </p>
<pre><code class="language-julia">Intrinsics::vector_reduce_sthreecmp:
Intrinsics::vector_reduce_uthreecmp:</code></pre>
<p>on line 5378 and get away with this. I don&#39;t see other places where it&#39;s defined.</p>
<p>I think I&#39;ve hit my potential here. I will go do some tutorials.</p>
<h2 id="29022024">29/02/2024 </h2>
<h3 id="hazlo_cobarde">&quot;hazlo cobarde&quot;</h3>
<p>Add the <a href="https://discourse.llvm.org/t/llvm-add-3-way-comparison-intrinsics/76807/10">3 way comparison instruction</a> <code>&lt;&#61;&gt;</code> to LLVM. </p>
<p>I like this GSoC in particular because</p>
<ul>
<li><p>I will learn a wide swath of LLVM </p>
</li>
<li><p>I&#39;ll be working with a lot of optimization passes</p>
</li>
<li><p>I&#39;ll get to bring cool perf to C&#43;&#43;/Rust and Julia</p>
</li>
<li><p>I was dared by <a href="https://twitter.com/DrawsMiguel/status/1759708211286835309">the other, more talented Miguel</a> to actually help improve LLVM</p>
</li>
</ul>
<h3 id="task_1_add_to_langref">Task 1: Add to LangRef</h3>
<p><a href="https://llvm.org/docs/ExtendingLLVM.html">Add a new intrinsic</a> - <code>Langref</code>, then <code>Intrinsics.td</code>, then maybe the pass verifier.</p>
<p>I&#39;ve already put up a <a href="https://github.com/llvm/llvm-project/pull/83227">sample PR</a> and got redirected on what looks like the proper working path for this endeavour.</p>
<p>Oh neat, I&#39;ve finished. Only took about 1 hour with careful copy pasting. I&#39;m probably blundering the return type being <code>iM</code> bits, but someone will correct me.</p>
<p>Now, I need to add an entry of the intrinsic into TableGen.</p>
<h3 id="task_2_add_to_intrinsicstd">Task 2: Add to Intrinsics.td</h3>
<p>Whelp, I guess I gotta learn tablegen and then this <code>Intrinsics.td</code> file.</p>
<p>Ok, I found <a href="https://llvm.org/docs/TableGen/index.html">a non-intimidating TableGen overview</a>.</p>
<p>Gotta find the optimization wizardry in there after reading for a few minutes.</p>
<p>Alright, took more than a bit of an hour but <a href="https://github.com/llvm/llvm-project/pull/83227#issuecomment-1972375003">I got pushed something for this task</a>.</p>
<p>Pinged Nikita to get some adults to look at my horrible TableGen incantation.</p>
<p>See ya tomorrow.</p>
]]></content:encoded>
        
    <pubDate>Thu, 29 Feb 2024 00:00:00 +0000</pubDate>    
    
    
    <atom:author>
    <atom:name>Miguel Raz GuzmÃ¡n Macedo</atom:name>
    </atom:author>
                
</item>
</channel></rss>